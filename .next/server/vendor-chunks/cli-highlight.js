"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/cli-highlight";
exports.ids = ["vendor-chunks/cli-highlight"];
exports.modules = {

/***/ "(rsc)/./node_modules/cli-highlight/dist/index.js":
/*!**************************************************!*\
  !*** ./node_modules/cli-highlight/dist/index.js ***!
  \**************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

eval("\nvar __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });\n}) : (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    o[k2] = m[k];\n}));\nvar __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {\n    Object.defineProperty(o, \"default\", { enumerable: true, value: v });\n}) : function(o, v) {\n    o[\"default\"] = v;\n});\nvar __importStar = (this && this.__importStar) || function (mod) {\n    if (mod && mod.__esModule) return mod;\n    var result = {};\n    if (mod != null) for (var k in mod) if (k !== \"default\" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);\n    __setModuleDefault(result, mod);\n    return result;\n};\nvar __exportStar = (this && this.__exportStar) || function(m, exports) {\n    for (var p in m) if (p !== \"default\" && !Object.prototype.hasOwnProperty.call(exports, p)) __createBinding(exports, m, p);\n};\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.supportsLanguage = exports.listLanguages = exports.highlight = void 0;\nvar hljs = __importStar(__webpack_require__(/*! highlight.js */ \"(rsc)/./node_modules/highlight.js/lib/index.js\"));\nvar parse5 = __importStar(__webpack_require__(/*! parse5 */ \"(rsc)/./node_modules/parse5/lib/index.js\"));\nvar parse5_htmlparser2_tree_adapter_1 = __importDefault(__webpack_require__(/*! parse5-htmlparser2-tree-adapter */ \"(rsc)/./node_modules/parse5-htmlparser2-tree-adapter/lib/index.js\"));\nvar theme_1 = __webpack_require__(/*! ./theme */ \"(rsc)/./node_modules/cli-highlight/dist/theme.js\");\nfunction colorizeNode(node, theme, context) {\n    if (theme === void 0) { theme = {}; }\n    switch (node.type) {\n        case 'text': {\n            var text = node.data;\n            if (context === undefined) {\n                return (theme.default || theme_1.DEFAULT_THEME.default || theme_1.plain)(text);\n            }\n            return text;\n        }\n        case 'tag': {\n            var hljsClass = /hljs-(\\w+)/.exec(node.attribs.class);\n            if (hljsClass) {\n                var token_1 = hljsClass[1];\n                var nodeData = node.childNodes\n                    .map(function (node) { return colorizeNode(node, theme, token_1); })\n                    .join('');\n                return (theme[token_1] || theme_1.DEFAULT_THEME[token_1] || theme_1.plain)(nodeData);\n            }\n            // Return the data itself when the class name isn't prefixed with a highlight.js token prefix.\n            // This is common in instances of sublanguages (JSX, Markdown Code Blocks, etc.)\n            return node.childNodes.map(function (node) { return colorizeNode(node, theme); }).join('');\n        }\n    }\n    throw new Error('Invalid node type ' + node.type);\n}\nfunction colorize(code, theme) {\n    if (theme === void 0) { theme = {}; }\n    var fragment = parse5.parseFragment(code, {\n        treeAdapter: parse5_htmlparser2_tree_adapter_1.default,\n    });\n    return fragment.childNodes.map(function (node) { return colorizeNode(node, theme); }).join('');\n}\n/**\n * Apply syntax highlighting to `code` with ASCII color codes. The language is automatically\n * detected if not set.\n *\n * ```ts\n * import {highlight} from 'cli-highlight';\n * import * as fs from 'fs';\n *\n * fs.readFile('package.json', 'utf8', (err: any, json: string) => {\n *     console.log('package.json:');\n *     console.log(highlight(json));\n * });\n * ```\n *\n * @param code The code to highlight\n * @param options Optional options\n */\nfunction highlight(code, options) {\n    if (options === void 0) { options = {}; }\n    var html;\n    if (options.language) {\n        html = hljs.highlight(code, { language: options.language, ignoreIllegals: options.ignoreIllegals }).value;\n    }\n    else {\n        html = hljs.highlightAuto(code, options.languageSubset).value;\n    }\n    return colorize(html, options.theme);\n}\nexports.highlight = highlight;\n/**\n * Returns all supported languages\n */\nfunction listLanguages() {\n    return hljs.listLanguages();\n}\nexports.listLanguages = listLanguages;\n/**\n * Returns true if the language is supported\n * @param name A language name, alias or file extension\n */\nfunction supportsLanguage(name) {\n    return !!hljs.getLanguage(name);\n}\nexports.supportsLanguage = supportsLanguage;\nexports[\"default\"] = highlight;\n__exportStar(__webpack_require__(/*! ./theme */ \"(rsc)/./node_modules/cli-highlight/dist/theme.js\"), exports);\n//# sourceMappingURL=index.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvY2xpLWhpZ2hsaWdodC9kaXN0L2luZGV4LmpzIiwibWFwcGluZ3MiOiJBQUFhO0FBQ2I7QUFDQTtBQUNBLG1DQUFtQyxvQ0FBb0MsZ0JBQWdCO0FBQ3ZGLENBQUM7QUFDRDtBQUNBO0FBQ0EsQ0FBQztBQUNEO0FBQ0EsMENBQTBDLDRCQUE0QjtBQUN0RSxDQUFDO0FBQ0Q7QUFDQSxDQUFDO0FBQ0Q7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLDZDQUE2QztBQUM3QztBQUNBLDhDQUE2QyxFQUFFLGFBQWEsRUFBQztBQUM3RCx3QkFBd0IsR0FBRyxxQkFBcUIsR0FBRyxpQkFBaUI7QUFDcEUsd0JBQXdCLG1CQUFPLENBQUMsb0VBQWM7QUFDOUMsMEJBQTBCLG1CQUFPLENBQUMsd0RBQVE7QUFDMUMsd0RBQXdELG1CQUFPLENBQUMsMEdBQWlDO0FBQ2pHLGNBQWMsbUJBQU8sQ0FBQyxpRUFBUztBQUMvQjtBQUNBLDRCQUE0QjtBQUM1QjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLDJDQUEyQyw0Q0FBNEM7QUFDdkY7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHlEQUF5RCxtQ0FBbUM7QUFDNUY7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLDRCQUE0QjtBQUM1QjtBQUNBO0FBQ0EsS0FBSztBQUNMLHFEQUFxRCxtQ0FBbUM7QUFDeEY7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsV0FBVyxXQUFXO0FBQ3RCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxJQUFJO0FBQ0o7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsOEJBQThCO0FBQzlCO0FBQ0E7QUFDQSxzQ0FBc0Msb0VBQW9FO0FBQzFHO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGlCQUFpQjtBQUNqQjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxxQkFBcUI7QUFDckI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSx3QkFBd0I7QUFDeEIsa0JBQWU7QUFDZixhQUFhLG1CQUFPLENBQUMsaUVBQVM7QUFDOUIiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9hY2VsZXJhLW1vdmllcy8uL25vZGVfbW9kdWxlcy9jbGktaGlnaGxpZ2h0L2Rpc3QvaW5kZXguanM/N2FkMCJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcbnZhciBfX2NyZWF0ZUJpbmRpbmcgPSAodGhpcyAmJiB0aGlzLl9fY3JlYXRlQmluZGluZykgfHwgKE9iamVjdC5jcmVhdGUgPyAoZnVuY3Rpb24obywgbSwgaywgazIpIHtcbiAgICBpZiAoazIgPT09IHVuZGVmaW5lZCkgazIgPSBrO1xuICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShvLCBrMiwgeyBlbnVtZXJhYmxlOiB0cnVlLCBnZXQ6IGZ1bmN0aW9uKCkgeyByZXR1cm4gbVtrXTsgfSB9KTtcbn0pIDogKGZ1bmN0aW9uKG8sIG0sIGssIGsyKSB7XG4gICAgaWYgKGsyID09PSB1bmRlZmluZWQpIGsyID0gaztcbiAgICBvW2syXSA9IG1ba107XG59KSk7XG52YXIgX19zZXRNb2R1bGVEZWZhdWx0ID0gKHRoaXMgJiYgdGhpcy5fX3NldE1vZHVsZURlZmF1bHQpIHx8IChPYmplY3QuY3JlYXRlID8gKGZ1bmN0aW9uKG8sIHYpIHtcbiAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkobywgXCJkZWZhdWx0XCIsIHsgZW51bWVyYWJsZTogdHJ1ZSwgdmFsdWU6IHYgfSk7XG59KSA6IGZ1bmN0aW9uKG8sIHYpIHtcbiAgICBvW1wiZGVmYXVsdFwiXSA9IHY7XG59KTtcbnZhciBfX2ltcG9ydFN0YXIgPSAodGhpcyAmJiB0aGlzLl9faW1wb3J0U3RhcikgfHwgZnVuY3Rpb24gKG1vZCkge1xuICAgIGlmIChtb2QgJiYgbW9kLl9fZXNNb2R1bGUpIHJldHVybiBtb2Q7XG4gICAgdmFyIHJlc3VsdCA9IHt9O1xuICAgIGlmIChtb2QgIT0gbnVsbCkgZm9yICh2YXIgayBpbiBtb2QpIGlmIChrICE9PSBcImRlZmF1bHRcIiAmJiBPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwobW9kLCBrKSkgX19jcmVhdGVCaW5kaW5nKHJlc3VsdCwgbW9kLCBrKTtcbiAgICBfX3NldE1vZHVsZURlZmF1bHQocmVzdWx0LCBtb2QpO1xuICAgIHJldHVybiByZXN1bHQ7XG59O1xudmFyIF9fZXhwb3J0U3RhciA9ICh0aGlzICYmIHRoaXMuX19leHBvcnRTdGFyKSB8fCBmdW5jdGlvbihtLCBleHBvcnRzKSB7XG4gICAgZm9yICh2YXIgcCBpbiBtKSBpZiAocCAhPT0gXCJkZWZhdWx0XCIgJiYgIU9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChleHBvcnRzLCBwKSkgX19jcmVhdGVCaW5kaW5nKGV4cG9ydHMsIG0sIHApO1xufTtcbnZhciBfX2ltcG9ydERlZmF1bHQgPSAodGhpcyAmJiB0aGlzLl9faW1wb3J0RGVmYXVsdCkgfHwgZnVuY3Rpb24gKG1vZCkge1xuICAgIHJldHVybiAobW9kICYmIG1vZC5fX2VzTW9kdWxlKSA/IG1vZCA6IHsgXCJkZWZhdWx0XCI6IG1vZCB9O1xufTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmV4cG9ydHMuc3VwcG9ydHNMYW5ndWFnZSA9IGV4cG9ydHMubGlzdExhbmd1YWdlcyA9IGV4cG9ydHMuaGlnaGxpZ2h0ID0gdm9pZCAwO1xudmFyIGhsanMgPSBfX2ltcG9ydFN0YXIocmVxdWlyZShcImhpZ2hsaWdodC5qc1wiKSk7XG52YXIgcGFyc2U1ID0gX19pbXBvcnRTdGFyKHJlcXVpcmUoXCJwYXJzZTVcIikpO1xudmFyIHBhcnNlNV9odG1scGFyc2VyMl90cmVlX2FkYXB0ZXJfMSA9IF9faW1wb3J0RGVmYXVsdChyZXF1aXJlKFwicGFyc2U1LWh0bWxwYXJzZXIyLXRyZWUtYWRhcHRlclwiKSk7XG52YXIgdGhlbWVfMSA9IHJlcXVpcmUoXCIuL3RoZW1lXCIpO1xuZnVuY3Rpb24gY29sb3JpemVOb2RlKG5vZGUsIHRoZW1lLCBjb250ZXh0KSB7XG4gICAgaWYgKHRoZW1lID09PSB2b2lkIDApIHsgdGhlbWUgPSB7fTsgfVxuICAgIHN3aXRjaCAobm9kZS50eXBlKSB7XG4gICAgICAgIGNhc2UgJ3RleHQnOiB7XG4gICAgICAgICAgICB2YXIgdGV4dCA9IG5vZGUuZGF0YTtcbiAgICAgICAgICAgIGlmIChjb250ZXh0ID09PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gKHRoZW1lLmRlZmF1bHQgfHwgdGhlbWVfMS5ERUZBVUxUX1RIRU1FLmRlZmF1bHQgfHwgdGhlbWVfMS5wbGFpbikodGV4dCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4gdGV4dDtcbiAgICAgICAgfVxuICAgICAgICBjYXNlICd0YWcnOiB7XG4gICAgICAgICAgICB2YXIgaGxqc0NsYXNzID0gL2hsanMtKFxcdyspLy5leGVjKG5vZGUuYXR0cmlicy5jbGFzcyk7XG4gICAgICAgICAgICBpZiAoaGxqc0NsYXNzKSB7XG4gICAgICAgICAgICAgICAgdmFyIHRva2VuXzEgPSBobGpzQ2xhc3NbMV07XG4gICAgICAgICAgICAgICAgdmFyIG5vZGVEYXRhID0gbm9kZS5jaGlsZE5vZGVzXG4gICAgICAgICAgICAgICAgICAgIC5tYXAoZnVuY3Rpb24gKG5vZGUpIHsgcmV0dXJuIGNvbG9yaXplTm9kZShub2RlLCB0aGVtZSwgdG9rZW5fMSk7IH0pXG4gICAgICAgICAgICAgICAgICAgIC5qb2luKCcnKTtcbiAgICAgICAgICAgICAgICByZXR1cm4gKHRoZW1lW3Rva2VuXzFdIHx8IHRoZW1lXzEuREVGQVVMVF9USEVNRVt0b2tlbl8xXSB8fCB0aGVtZV8xLnBsYWluKShub2RlRGF0YSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICAvLyBSZXR1cm4gdGhlIGRhdGEgaXRzZWxmIHdoZW4gdGhlIGNsYXNzIG5hbWUgaXNuJ3QgcHJlZml4ZWQgd2l0aCBhIGhpZ2hsaWdodC5qcyB0b2tlbiBwcmVmaXguXG4gICAgICAgICAgICAvLyBUaGlzIGlzIGNvbW1vbiBpbiBpbnN0YW5jZXMgb2Ygc3VibGFuZ3VhZ2VzIChKU1gsIE1hcmtkb3duIENvZGUgQmxvY2tzLCBldGMuKVxuICAgICAgICAgICAgcmV0dXJuIG5vZGUuY2hpbGROb2Rlcy5tYXAoZnVuY3Rpb24gKG5vZGUpIHsgcmV0dXJuIGNvbG9yaXplTm9kZShub2RlLCB0aGVtZSk7IH0pLmpvaW4oJycpO1xuICAgICAgICB9XG4gICAgfVxuICAgIHRocm93IG5ldyBFcnJvcignSW52YWxpZCBub2RlIHR5cGUgJyArIG5vZGUudHlwZSk7XG59XG5mdW5jdGlvbiBjb2xvcml6ZShjb2RlLCB0aGVtZSkge1xuICAgIGlmICh0aGVtZSA9PT0gdm9pZCAwKSB7IHRoZW1lID0ge307IH1cbiAgICB2YXIgZnJhZ21lbnQgPSBwYXJzZTUucGFyc2VGcmFnbWVudChjb2RlLCB7XG4gICAgICAgIHRyZWVBZGFwdGVyOiBwYXJzZTVfaHRtbHBhcnNlcjJfdHJlZV9hZGFwdGVyXzEuZGVmYXVsdCxcbiAgICB9KTtcbiAgICByZXR1cm4gZnJhZ21lbnQuY2hpbGROb2Rlcy5tYXAoZnVuY3Rpb24gKG5vZGUpIHsgcmV0dXJuIGNvbG9yaXplTm9kZShub2RlLCB0aGVtZSk7IH0pLmpvaW4oJycpO1xufVxuLyoqXG4gKiBBcHBseSBzeW50YXggaGlnaGxpZ2h0aW5nIHRvIGBjb2RlYCB3aXRoIEFTQ0lJIGNvbG9yIGNvZGVzLiBUaGUgbGFuZ3VhZ2UgaXMgYXV0b21hdGljYWxseVxuICogZGV0ZWN0ZWQgaWYgbm90IHNldC5cbiAqXG4gKiBgYGB0c1xuICogaW1wb3J0IHtoaWdobGlnaHR9IGZyb20gJ2NsaS1oaWdobGlnaHQnO1xuICogaW1wb3J0ICogYXMgZnMgZnJvbSAnZnMnO1xuICpcbiAqIGZzLnJlYWRGaWxlKCdwYWNrYWdlLmpzb24nLCAndXRmOCcsIChlcnI6IGFueSwganNvbjogc3RyaW5nKSA9PiB7XG4gKiAgICAgY29uc29sZS5sb2coJ3BhY2thZ2UuanNvbjonKTtcbiAqICAgICBjb25zb2xlLmxvZyhoaWdobGlnaHQoanNvbikpO1xuICogfSk7XG4gKiBgYGBcbiAqXG4gKiBAcGFyYW0gY29kZSBUaGUgY29kZSB0byBoaWdobGlnaHRcbiAqIEBwYXJhbSBvcHRpb25zIE9wdGlvbmFsIG9wdGlvbnNcbiAqL1xuZnVuY3Rpb24gaGlnaGxpZ2h0KGNvZGUsIG9wdGlvbnMpIHtcbiAgICBpZiAob3B0aW9ucyA9PT0gdm9pZCAwKSB7IG9wdGlvbnMgPSB7fTsgfVxuICAgIHZhciBodG1sO1xuICAgIGlmIChvcHRpb25zLmxhbmd1YWdlKSB7XG4gICAgICAgIGh0bWwgPSBobGpzLmhpZ2hsaWdodChjb2RlLCB7IGxhbmd1YWdlOiBvcHRpb25zLmxhbmd1YWdlLCBpZ25vcmVJbGxlZ2Fsczogb3B0aW9ucy5pZ25vcmVJbGxlZ2FscyB9KS52YWx1ZTtcbiAgICB9XG4gICAgZWxzZSB7XG4gICAgICAgIGh0bWwgPSBobGpzLmhpZ2hsaWdodEF1dG8oY29kZSwgb3B0aW9ucy5sYW5ndWFnZVN1YnNldCkudmFsdWU7XG4gICAgfVxuICAgIHJldHVybiBjb2xvcml6ZShodG1sLCBvcHRpb25zLnRoZW1lKTtcbn1cbmV4cG9ydHMuaGlnaGxpZ2h0ID0gaGlnaGxpZ2h0O1xuLyoqXG4gKiBSZXR1cm5zIGFsbCBzdXBwb3J0ZWQgbGFuZ3VhZ2VzXG4gKi9cbmZ1bmN0aW9uIGxpc3RMYW5ndWFnZXMoKSB7XG4gICAgcmV0dXJuIGhsanMubGlzdExhbmd1YWdlcygpO1xufVxuZXhwb3J0cy5saXN0TGFuZ3VhZ2VzID0gbGlzdExhbmd1YWdlcztcbi8qKlxuICogUmV0dXJucyB0cnVlIGlmIHRoZSBsYW5ndWFnZSBpcyBzdXBwb3J0ZWRcbiAqIEBwYXJhbSBuYW1lIEEgbGFuZ3VhZ2UgbmFtZSwgYWxpYXMgb3IgZmlsZSBleHRlbnNpb25cbiAqL1xuZnVuY3Rpb24gc3VwcG9ydHNMYW5ndWFnZShuYW1lKSB7XG4gICAgcmV0dXJuICEhaGxqcy5nZXRMYW5ndWFnZShuYW1lKTtcbn1cbmV4cG9ydHMuc3VwcG9ydHNMYW5ndWFnZSA9IHN1cHBvcnRzTGFuZ3VhZ2U7XG5leHBvcnRzLmRlZmF1bHQgPSBoaWdobGlnaHQ7XG5fX2V4cG9ydFN0YXIocmVxdWlyZShcIi4vdGhlbWVcIiksIGV4cG9ydHMpO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9aW5kZXguanMubWFwIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/cli-highlight/dist/index.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/cli-highlight/dist/theme.js":
/*!**************************************************!*\
  !*** ./node_modules/cli-highlight/dist/theme.js ***!
  \**************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

eval("\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.parse = exports.stringify = exports.toJson = exports.fromJson = exports.DEFAULT_THEME = exports.plain = void 0;\nvar chalk_1 = __importDefault(__webpack_require__(/*! chalk */ \"(rsc)/./node_modules/chalk/source/index.js\"));\n/**\n * Identity function for tokens that should not be styled (returns the input string as-is).\n * See [[Theme]] for an example.\n */\nvar plain = function (codePart) { return codePart; };\nexports.plain = plain;\n/**\n * The default theme. It is possible to override just individual keys.\n */\nexports.DEFAULT_THEME = {\n    /**\n     * keyword in a regular Algol-style language\n     */\n    keyword: chalk_1.default.blue,\n    /**\n     * built-in or library object (constant, class, function)\n     */\n    built_in: chalk_1.default.cyan,\n    /**\n     * user-defined type in a language with first-class syntactically significant types, like\n     * Haskell\n     */\n    type: chalk_1.default.cyan.dim,\n    /**\n     * special identifier for a built-in value (\"true\", \"false\", \"null\")\n     */\n    literal: chalk_1.default.blue,\n    /**\n     * number, including units and modifiers, if any.\n     */\n    number: chalk_1.default.green,\n    /**\n     * literal regular expression\n     */\n    regexp: chalk_1.default.red,\n    /**\n     * literal string, character\n     */\n    string: chalk_1.default.red,\n    /**\n     * parsed section inside a literal string\n     */\n    subst: exports.plain,\n    /**\n     * symbolic constant, interned string, goto label\n     */\n    symbol: exports.plain,\n    /**\n     * class or class-level declaration (interfaces, traits, modules, etc)\n     */\n    class: chalk_1.default.blue,\n    /**\n     * function or method declaration\n     */\n    function: chalk_1.default.yellow,\n    /**\n     * name of a class or a function at the place of declaration\n     */\n    title: exports.plain,\n    /**\n     * block of function arguments (parameters) at the place of declaration\n     */\n    params: exports.plain,\n    /**\n     * comment\n     */\n    comment: chalk_1.default.green,\n    /**\n     * documentation markup within comments\n     */\n    doctag: chalk_1.default.green,\n    /**\n     * flags, modifiers, annotations, processing instructions, preprocessor directive, etc\n     */\n    meta: chalk_1.default.grey,\n    /**\n     * keyword or built-in within meta construct\n     */\n    'meta-keyword': exports.plain,\n    /**\n     * string within meta construct\n     */\n    'meta-string': exports.plain,\n    /**\n     * heading of a section in a config file, heading in text markup\n     */\n    section: exports.plain,\n    /**\n     * XML/HTML tag\n     */\n    tag: chalk_1.default.grey,\n    /**\n     * name of an XML tag, the first word in an s-expression\n     */\n    name: chalk_1.default.blue,\n    /**\n     * s-expression name from the language standard library\n     */\n    'builtin-name': exports.plain,\n    /**\n     * name of an attribute with no language defined semantics (keys in JSON, setting names in\n     * .ini), also sub-attribute within another highlighted object, like XML tag\n     */\n    attr: chalk_1.default.cyan,\n    /**\n     * name of an attribute followed by a structured value part, like CSS properties\n     */\n    attribute: exports.plain,\n    /**\n     * variable in a config or a template file, environment var expansion in a script\n     */\n    variable: exports.plain,\n    /**\n     * list item bullet in text markup\n     */\n    bullet: exports.plain,\n    /**\n     * code block in text markup\n     */\n    code: exports.plain,\n    /**\n     * emphasis in text markup\n     */\n    emphasis: chalk_1.default.italic,\n    /**\n     * strong emphasis in text markup\n     */\n    strong: chalk_1.default.bold,\n    /**\n     * mathematical formula in text markup\n     */\n    formula: exports.plain,\n    /**\n     * hyperlink in text markup\n     */\n    link: chalk_1.default.underline,\n    /**\n     * quotation in text markup\n     */\n    quote: exports.plain,\n    /**\n     * tag selector in CSS\n     */\n    'selector-tag': exports.plain,\n    /**\n     * #id selector in CSS\n     */\n    'selector-id': exports.plain,\n    /**\n     * .class selector in CSS\n     */\n    'selector-class': exports.plain,\n    /**\n     * [attr] selector in CSS\n     */\n    'selector-attr': exports.plain,\n    /**\n     * :pseudo selector in CSS\n     */\n    'selector-pseudo': exports.plain,\n    /**\n     * tag of a template language\n     */\n    'template-tag': exports.plain,\n    /**\n     * variable in a template language\n     */\n    'template-variable': exports.plain,\n    /**\n     * added or changed line in a diff\n     */\n    addition: chalk_1.default.green,\n    /**\n     * deleted line in a diff\n     */\n    deletion: chalk_1.default.red,\n    /**\n     * things not matched by any token\n     */\n    default: exports.plain,\n};\n/**\n * Converts a [[JsonTheme]] with string values to a [[Theme]] with formatter functions. Used by [[parse]].\n */\nfunction fromJson(json) {\n    var theme = {};\n    for (var _i = 0, _a = Object.keys(json); _i < _a.length; _i++) {\n        var key = _a[_i];\n        var style = json[key];\n        if (Array.isArray(style)) {\n            ;\n            theme[key] = style.reduce(function (previous, current) { return (current === 'plain' ? exports.plain : previous[current]); }, chalk_1.default);\n        }\n        else {\n            ;\n            theme[key] = chalk_1.default[style];\n        }\n    }\n    return theme;\n}\nexports.fromJson = fromJson;\n/**\n * Converts a [[Theme]] with formatter functions to a [[JsonTheme]] with string values. Used by [[stringify]].\n */\nfunction toJson(theme) {\n    var jsonTheme = {};\n    for (var _i = 0, _a = Object.keys(jsonTheme); _i < _a.length; _i++) {\n        var key = _a[_i];\n        var style = jsonTheme[key];\n        jsonTheme[key] = style._styles;\n    }\n    return jsonTheme;\n}\nexports.toJson = toJson;\n/**\n * Stringifies a [[Theme]] with formatter functions to a JSON string.\n *\n * ```ts\n * import chalk = require('chalk');\n * import {stringify} from 'cli-highlight';\n * import * as fs from 'fs';\n *\n * const myTheme: Theme = {\n *     keyword: chalk.red.bold,\n *     addition: chalk.green,\n *     deletion: chalk.red.strikethrough,\n *     number: plain\n * }\n * const json = stringify(myTheme);\n * fs.writeFile('mytheme.json', json, (err: any) => {\n *     if (err) throw err;\n *     console.log('Theme saved');\n * });\n * ```\n */\nfunction stringify(theme) {\n    return JSON.stringify(toJson(theme));\n}\nexports.stringify = stringify;\n/**\n * Parses a JSON string into a [[Theme]] with formatter functions.\n *\n * ```ts\n * import * as fs from 'fs';\n * import {parse, highlight} from 'cli-highlight';\n *\n * fs.readFile('mytheme.json', 'utf8', (err: any, json: string)  => {\n *     if (err) throw err;\n *     const code = highlight('SELECT * FROM table', {theme: parse(json)});\n *     console.log(code);\n * });\n * ```\n */\nfunction parse(json) {\n    return fromJson(JSON.parse(json));\n}\nexports.parse = parse;\n//# sourceMappingURL=theme.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvY2xpLWhpZ2hsaWdodC9kaXN0L3RoZW1lLmpzIiwibWFwcGluZ3MiOiJBQUFhO0FBQ2I7QUFDQSw2Q0FBNkM7QUFDN0M7QUFDQSw4Q0FBNkMsRUFBRSxhQUFhLEVBQUM7QUFDN0QsYUFBYSxHQUFHLGlCQUFpQixHQUFHLGNBQWMsR0FBRyxnQkFBZ0IsR0FBRyxxQkFBcUIsR0FBRyxhQUFhO0FBQzdHLDhCQUE4QixtQkFBTyxDQUFDLHlEQUFPO0FBQzdDO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esa0NBQWtDO0FBQ2xDLGFBQWE7QUFDYjtBQUNBO0FBQ0E7QUFDQSxxQkFBcUI7QUFDckI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLDZDQUE2QyxnQkFBZ0I7QUFDN0Q7QUFDQTtBQUNBO0FBQ0E7QUFDQSxxRUFBcUUsbUVBQW1FO0FBQ3hJO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxnQkFBZ0I7QUFDaEI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGtEQUFrRCxnQkFBZ0I7QUFDbEU7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsY0FBYztBQUNkO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxXQUFXLFdBQVc7QUFDdEI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsSUFBSTtBQUNKO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxpQkFBaUI7QUFDakI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFdBQVcsa0JBQWtCO0FBQzdCO0FBQ0E7QUFDQTtBQUNBLHNEQUFzRCxtQkFBbUI7QUFDekU7QUFDQSxJQUFJO0FBQ0o7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGFBQWE7QUFDYiIsInNvdXJjZXMiOlsid2VicGFjazovL2FjZWxlcmEtbW92aWVzLy4vbm9kZV9tb2R1bGVzL2NsaS1oaWdobGlnaHQvZGlzdC90aGVtZS5qcz80YTc4Il0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xudmFyIF9faW1wb3J0RGVmYXVsdCA9ICh0aGlzICYmIHRoaXMuX19pbXBvcnREZWZhdWx0KSB8fCBmdW5jdGlvbiAobW9kKSB7XG4gICAgcmV0dXJuIChtb2QgJiYgbW9kLl9fZXNNb2R1bGUpID8gbW9kIDogeyBcImRlZmF1bHRcIjogbW9kIH07XG59O1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuZXhwb3J0cy5wYXJzZSA9IGV4cG9ydHMuc3RyaW5naWZ5ID0gZXhwb3J0cy50b0pzb24gPSBleHBvcnRzLmZyb21Kc29uID0gZXhwb3J0cy5ERUZBVUxUX1RIRU1FID0gZXhwb3J0cy5wbGFpbiA9IHZvaWQgMDtcbnZhciBjaGFsa18xID0gX19pbXBvcnREZWZhdWx0KHJlcXVpcmUoXCJjaGFsa1wiKSk7XG4vKipcbiAqIElkZW50aXR5IGZ1bmN0aW9uIGZvciB0b2tlbnMgdGhhdCBzaG91bGQgbm90IGJlIHN0eWxlZCAocmV0dXJucyB0aGUgaW5wdXQgc3RyaW5nIGFzLWlzKS5cbiAqIFNlZSBbW1RoZW1lXV0gZm9yIGFuIGV4YW1wbGUuXG4gKi9cbnZhciBwbGFpbiA9IGZ1bmN0aW9uIChjb2RlUGFydCkgeyByZXR1cm4gY29kZVBhcnQ7IH07XG5leHBvcnRzLnBsYWluID0gcGxhaW47XG4vKipcbiAqIFRoZSBkZWZhdWx0IHRoZW1lLiBJdCBpcyBwb3NzaWJsZSB0byBvdmVycmlkZSBqdXN0IGluZGl2aWR1YWwga2V5cy5cbiAqL1xuZXhwb3J0cy5ERUZBVUxUX1RIRU1FID0ge1xuICAgIC8qKlxuICAgICAqIGtleXdvcmQgaW4gYSByZWd1bGFyIEFsZ29sLXN0eWxlIGxhbmd1YWdlXG4gICAgICovXG4gICAga2V5d29yZDogY2hhbGtfMS5kZWZhdWx0LmJsdWUsXG4gICAgLyoqXG4gICAgICogYnVpbHQtaW4gb3IgbGlicmFyeSBvYmplY3QgKGNvbnN0YW50LCBjbGFzcywgZnVuY3Rpb24pXG4gICAgICovXG4gICAgYnVpbHRfaW46IGNoYWxrXzEuZGVmYXVsdC5jeWFuLFxuICAgIC8qKlxuICAgICAqIHVzZXItZGVmaW5lZCB0eXBlIGluIGEgbGFuZ3VhZ2Ugd2l0aCBmaXJzdC1jbGFzcyBzeW50YWN0aWNhbGx5IHNpZ25pZmljYW50IHR5cGVzLCBsaWtlXG4gICAgICogSGFza2VsbFxuICAgICAqL1xuICAgIHR5cGU6IGNoYWxrXzEuZGVmYXVsdC5jeWFuLmRpbSxcbiAgICAvKipcbiAgICAgKiBzcGVjaWFsIGlkZW50aWZpZXIgZm9yIGEgYnVpbHQtaW4gdmFsdWUgKFwidHJ1ZVwiLCBcImZhbHNlXCIsIFwibnVsbFwiKVxuICAgICAqL1xuICAgIGxpdGVyYWw6IGNoYWxrXzEuZGVmYXVsdC5ibHVlLFxuICAgIC8qKlxuICAgICAqIG51bWJlciwgaW5jbHVkaW5nIHVuaXRzIGFuZCBtb2RpZmllcnMsIGlmIGFueS5cbiAgICAgKi9cbiAgICBudW1iZXI6IGNoYWxrXzEuZGVmYXVsdC5ncmVlbixcbiAgICAvKipcbiAgICAgKiBsaXRlcmFsIHJlZ3VsYXIgZXhwcmVzc2lvblxuICAgICAqL1xuICAgIHJlZ2V4cDogY2hhbGtfMS5kZWZhdWx0LnJlZCxcbiAgICAvKipcbiAgICAgKiBsaXRlcmFsIHN0cmluZywgY2hhcmFjdGVyXG4gICAgICovXG4gICAgc3RyaW5nOiBjaGFsa18xLmRlZmF1bHQucmVkLFxuICAgIC8qKlxuICAgICAqIHBhcnNlZCBzZWN0aW9uIGluc2lkZSBhIGxpdGVyYWwgc3RyaW5nXG4gICAgICovXG4gICAgc3Vic3Q6IGV4cG9ydHMucGxhaW4sXG4gICAgLyoqXG4gICAgICogc3ltYm9saWMgY29uc3RhbnQsIGludGVybmVkIHN0cmluZywgZ290byBsYWJlbFxuICAgICAqL1xuICAgIHN5bWJvbDogZXhwb3J0cy5wbGFpbixcbiAgICAvKipcbiAgICAgKiBjbGFzcyBvciBjbGFzcy1sZXZlbCBkZWNsYXJhdGlvbiAoaW50ZXJmYWNlcywgdHJhaXRzLCBtb2R1bGVzLCBldGMpXG4gICAgICovXG4gICAgY2xhc3M6IGNoYWxrXzEuZGVmYXVsdC5ibHVlLFxuICAgIC8qKlxuICAgICAqIGZ1bmN0aW9uIG9yIG1ldGhvZCBkZWNsYXJhdGlvblxuICAgICAqL1xuICAgIGZ1bmN0aW9uOiBjaGFsa18xLmRlZmF1bHQueWVsbG93LFxuICAgIC8qKlxuICAgICAqIG5hbWUgb2YgYSBjbGFzcyBvciBhIGZ1bmN0aW9uIGF0IHRoZSBwbGFjZSBvZiBkZWNsYXJhdGlvblxuICAgICAqL1xuICAgIHRpdGxlOiBleHBvcnRzLnBsYWluLFxuICAgIC8qKlxuICAgICAqIGJsb2NrIG9mIGZ1bmN0aW9uIGFyZ3VtZW50cyAocGFyYW1ldGVycykgYXQgdGhlIHBsYWNlIG9mIGRlY2xhcmF0aW9uXG4gICAgICovXG4gICAgcGFyYW1zOiBleHBvcnRzLnBsYWluLFxuICAgIC8qKlxuICAgICAqIGNvbW1lbnRcbiAgICAgKi9cbiAgICBjb21tZW50OiBjaGFsa18xLmRlZmF1bHQuZ3JlZW4sXG4gICAgLyoqXG4gICAgICogZG9jdW1lbnRhdGlvbiBtYXJrdXAgd2l0aGluIGNvbW1lbnRzXG4gICAgICovXG4gICAgZG9jdGFnOiBjaGFsa18xLmRlZmF1bHQuZ3JlZW4sXG4gICAgLyoqXG4gICAgICogZmxhZ3MsIG1vZGlmaWVycywgYW5ub3RhdGlvbnMsIHByb2Nlc3NpbmcgaW5zdHJ1Y3Rpb25zLCBwcmVwcm9jZXNzb3IgZGlyZWN0aXZlLCBldGNcbiAgICAgKi9cbiAgICBtZXRhOiBjaGFsa18xLmRlZmF1bHQuZ3JleSxcbiAgICAvKipcbiAgICAgKiBrZXl3b3JkIG9yIGJ1aWx0LWluIHdpdGhpbiBtZXRhIGNvbnN0cnVjdFxuICAgICAqL1xuICAgICdtZXRhLWtleXdvcmQnOiBleHBvcnRzLnBsYWluLFxuICAgIC8qKlxuICAgICAqIHN0cmluZyB3aXRoaW4gbWV0YSBjb25zdHJ1Y3RcbiAgICAgKi9cbiAgICAnbWV0YS1zdHJpbmcnOiBleHBvcnRzLnBsYWluLFxuICAgIC8qKlxuICAgICAqIGhlYWRpbmcgb2YgYSBzZWN0aW9uIGluIGEgY29uZmlnIGZpbGUsIGhlYWRpbmcgaW4gdGV4dCBtYXJrdXBcbiAgICAgKi9cbiAgICBzZWN0aW9uOiBleHBvcnRzLnBsYWluLFxuICAgIC8qKlxuICAgICAqIFhNTC9IVE1MIHRhZ1xuICAgICAqL1xuICAgIHRhZzogY2hhbGtfMS5kZWZhdWx0LmdyZXksXG4gICAgLyoqXG4gICAgICogbmFtZSBvZiBhbiBYTUwgdGFnLCB0aGUgZmlyc3Qgd29yZCBpbiBhbiBzLWV4cHJlc3Npb25cbiAgICAgKi9cbiAgICBuYW1lOiBjaGFsa18xLmRlZmF1bHQuYmx1ZSxcbiAgICAvKipcbiAgICAgKiBzLWV4cHJlc3Npb24gbmFtZSBmcm9tIHRoZSBsYW5ndWFnZSBzdGFuZGFyZCBsaWJyYXJ5XG4gICAgICovXG4gICAgJ2J1aWx0aW4tbmFtZSc6IGV4cG9ydHMucGxhaW4sXG4gICAgLyoqXG4gICAgICogbmFtZSBvZiBhbiBhdHRyaWJ1dGUgd2l0aCBubyBsYW5ndWFnZSBkZWZpbmVkIHNlbWFudGljcyAoa2V5cyBpbiBKU09OLCBzZXR0aW5nIG5hbWVzIGluXG4gICAgICogLmluaSksIGFsc28gc3ViLWF0dHJpYnV0ZSB3aXRoaW4gYW5vdGhlciBoaWdobGlnaHRlZCBvYmplY3QsIGxpa2UgWE1MIHRhZ1xuICAgICAqL1xuICAgIGF0dHI6IGNoYWxrXzEuZGVmYXVsdC5jeWFuLFxuICAgIC8qKlxuICAgICAqIG5hbWUgb2YgYW4gYXR0cmlidXRlIGZvbGxvd2VkIGJ5IGEgc3RydWN0dXJlZCB2YWx1ZSBwYXJ0LCBsaWtlIENTUyBwcm9wZXJ0aWVzXG4gICAgICovXG4gICAgYXR0cmlidXRlOiBleHBvcnRzLnBsYWluLFxuICAgIC8qKlxuICAgICAqIHZhcmlhYmxlIGluIGEgY29uZmlnIG9yIGEgdGVtcGxhdGUgZmlsZSwgZW52aXJvbm1lbnQgdmFyIGV4cGFuc2lvbiBpbiBhIHNjcmlwdFxuICAgICAqL1xuICAgIHZhcmlhYmxlOiBleHBvcnRzLnBsYWluLFxuICAgIC8qKlxuICAgICAqIGxpc3QgaXRlbSBidWxsZXQgaW4gdGV4dCBtYXJrdXBcbiAgICAgKi9cbiAgICBidWxsZXQ6IGV4cG9ydHMucGxhaW4sXG4gICAgLyoqXG4gICAgICogY29kZSBibG9jayBpbiB0ZXh0IG1hcmt1cFxuICAgICAqL1xuICAgIGNvZGU6IGV4cG9ydHMucGxhaW4sXG4gICAgLyoqXG4gICAgICogZW1waGFzaXMgaW4gdGV4dCBtYXJrdXBcbiAgICAgKi9cbiAgICBlbXBoYXNpczogY2hhbGtfMS5kZWZhdWx0Lml0YWxpYyxcbiAgICAvKipcbiAgICAgKiBzdHJvbmcgZW1waGFzaXMgaW4gdGV4dCBtYXJrdXBcbiAgICAgKi9cbiAgICBzdHJvbmc6IGNoYWxrXzEuZGVmYXVsdC5ib2xkLFxuICAgIC8qKlxuICAgICAqIG1hdGhlbWF0aWNhbCBmb3JtdWxhIGluIHRleHQgbWFya3VwXG4gICAgICovXG4gICAgZm9ybXVsYTogZXhwb3J0cy5wbGFpbixcbiAgICAvKipcbiAgICAgKiBoeXBlcmxpbmsgaW4gdGV4dCBtYXJrdXBcbiAgICAgKi9cbiAgICBsaW5rOiBjaGFsa18xLmRlZmF1bHQudW5kZXJsaW5lLFxuICAgIC8qKlxuICAgICAqIHF1b3RhdGlvbiBpbiB0ZXh0IG1hcmt1cFxuICAgICAqL1xuICAgIHF1b3RlOiBleHBvcnRzLnBsYWluLFxuICAgIC8qKlxuICAgICAqIHRhZyBzZWxlY3RvciBpbiBDU1NcbiAgICAgKi9cbiAgICAnc2VsZWN0b3ItdGFnJzogZXhwb3J0cy5wbGFpbixcbiAgICAvKipcbiAgICAgKiAjaWQgc2VsZWN0b3IgaW4gQ1NTXG4gICAgICovXG4gICAgJ3NlbGVjdG9yLWlkJzogZXhwb3J0cy5wbGFpbixcbiAgICAvKipcbiAgICAgKiAuY2xhc3Mgc2VsZWN0b3IgaW4gQ1NTXG4gICAgICovXG4gICAgJ3NlbGVjdG9yLWNsYXNzJzogZXhwb3J0cy5wbGFpbixcbiAgICAvKipcbiAgICAgKiBbYXR0cl0gc2VsZWN0b3IgaW4gQ1NTXG4gICAgICovXG4gICAgJ3NlbGVjdG9yLWF0dHInOiBleHBvcnRzLnBsYWluLFxuICAgIC8qKlxuICAgICAqIDpwc2V1ZG8gc2VsZWN0b3IgaW4gQ1NTXG4gICAgICovXG4gICAgJ3NlbGVjdG9yLXBzZXVkbyc6IGV4cG9ydHMucGxhaW4sXG4gICAgLyoqXG4gICAgICogdGFnIG9mIGEgdGVtcGxhdGUgbGFuZ3VhZ2VcbiAgICAgKi9cbiAgICAndGVtcGxhdGUtdGFnJzogZXhwb3J0cy5wbGFpbixcbiAgICAvKipcbiAgICAgKiB2YXJpYWJsZSBpbiBhIHRlbXBsYXRlIGxhbmd1YWdlXG4gICAgICovXG4gICAgJ3RlbXBsYXRlLXZhcmlhYmxlJzogZXhwb3J0cy5wbGFpbixcbiAgICAvKipcbiAgICAgKiBhZGRlZCBvciBjaGFuZ2VkIGxpbmUgaW4gYSBkaWZmXG4gICAgICovXG4gICAgYWRkaXRpb246IGNoYWxrXzEuZGVmYXVsdC5ncmVlbixcbiAgICAvKipcbiAgICAgKiBkZWxldGVkIGxpbmUgaW4gYSBkaWZmXG4gICAgICovXG4gICAgZGVsZXRpb246IGNoYWxrXzEuZGVmYXVsdC5yZWQsXG4gICAgLyoqXG4gICAgICogdGhpbmdzIG5vdCBtYXRjaGVkIGJ5IGFueSB0b2tlblxuICAgICAqL1xuICAgIGRlZmF1bHQ6IGV4cG9ydHMucGxhaW4sXG59O1xuLyoqXG4gKiBDb252ZXJ0cyBhIFtbSnNvblRoZW1lXV0gd2l0aCBzdHJpbmcgdmFsdWVzIHRvIGEgW1tUaGVtZV1dIHdpdGggZm9ybWF0dGVyIGZ1bmN0aW9ucy4gVXNlZCBieSBbW3BhcnNlXV0uXG4gKi9cbmZ1bmN0aW9uIGZyb21Kc29uKGpzb24pIHtcbiAgICB2YXIgdGhlbWUgPSB7fTtcbiAgICBmb3IgKHZhciBfaSA9IDAsIF9hID0gT2JqZWN0LmtleXMoanNvbik7IF9pIDwgX2EubGVuZ3RoOyBfaSsrKSB7XG4gICAgICAgIHZhciBrZXkgPSBfYVtfaV07XG4gICAgICAgIHZhciBzdHlsZSA9IGpzb25ba2V5XTtcbiAgICAgICAgaWYgKEFycmF5LmlzQXJyYXkoc3R5bGUpKSB7XG4gICAgICAgICAgICA7XG4gICAgICAgICAgICB0aGVtZVtrZXldID0gc3R5bGUucmVkdWNlKGZ1bmN0aW9uIChwcmV2aW91cywgY3VycmVudCkgeyByZXR1cm4gKGN1cnJlbnQgPT09ICdwbGFpbicgPyBleHBvcnRzLnBsYWluIDogcHJldmlvdXNbY3VycmVudF0pOyB9LCBjaGFsa18xLmRlZmF1bHQpO1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgO1xuICAgICAgICAgICAgdGhlbWVba2V5XSA9IGNoYWxrXzEuZGVmYXVsdFtzdHlsZV07XG4gICAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIHRoZW1lO1xufVxuZXhwb3J0cy5mcm9tSnNvbiA9IGZyb21Kc29uO1xuLyoqXG4gKiBDb252ZXJ0cyBhIFtbVGhlbWVdXSB3aXRoIGZvcm1hdHRlciBmdW5jdGlvbnMgdG8gYSBbW0pzb25UaGVtZV1dIHdpdGggc3RyaW5nIHZhbHVlcy4gVXNlZCBieSBbW3N0cmluZ2lmeV1dLlxuICovXG5mdW5jdGlvbiB0b0pzb24odGhlbWUpIHtcbiAgICB2YXIganNvblRoZW1lID0ge307XG4gICAgZm9yICh2YXIgX2kgPSAwLCBfYSA9IE9iamVjdC5rZXlzKGpzb25UaGVtZSk7IF9pIDwgX2EubGVuZ3RoOyBfaSsrKSB7XG4gICAgICAgIHZhciBrZXkgPSBfYVtfaV07XG4gICAgICAgIHZhciBzdHlsZSA9IGpzb25UaGVtZVtrZXldO1xuICAgICAgICBqc29uVGhlbWVba2V5XSA9IHN0eWxlLl9zdHlsZXM7XG4gICAgfVxuICAgIHJldHVybiBqc29uVGhlbWU7XG59XG5leHBvcnRzLnRvSnNvbiA9IHRvSnNvbjtcbi8qKlxuICogU3RyaW5naWZpZXMgYSBbW1RoZW1lXV0gd2l0aCBmb3JtYXR0ZXIgZnVuY3Rpb25zIHRvIGEgSlNPTiBzdHJpbmcuXG4gKlxuICogYGBgdHNcbiAqIGltcG9ydCBjaGFsayA9IHJlcXVpcmUoJ2NoYWxrJyk7XG4gKiBpbXBvcnQge3N0cmluZ2lmeX0gZnJvbSAnY2xpLWhpZ2hsaWdodCc7XG4gKiBpbXBvcnQgKiBhcyBmcyBmcm9tICdmcyc7XG4gKlxuICogY29uc3QgbXlUaGVtZTogVGhlbWUgPSB7XG4gKiAgICAga2V5d29yZDogY2hhbGsucmVkLmJvbGQsXG4gKiAgICAgYWRkaXRpb246IGNoYWxrLmdyZWVuLFxuICogICAgIGRlbGV0aW9uOiBjaGFsay5yZWQuc3RyaWtldGhyb3VnaCxcbiAqICAgICBudW1iZXI6IHBsYWluXG4gKiB9XG4gKiBjb25zdCBqc29uID0gc3RyaW5naWZ5KG15VGhlbWUpO1xuICogZnMud3JpdGVGaWxlKCdteXRoZW1lLmpzb24nLCBqc29uLCAoZXJyOiBhbnkpID0+IHtcbiAqICAgICBpZiAoZXJyKSB0aHJvdyBlcnI7XG4gKiAgICAgY29uc29sZS5sb2coJ1RoZW1lIHNhdmVkJyk7XG4gKiB9KTtcbiAqIGBgYFxuICovXG5mdW5jdGlvbiBzdHJpbmdpZnkodGhlbWUpIHtcbiAgICByZXR1cm4gSlNPTi5zdHJpbmdpZnkodG9Kc29uKHRoZW1lKSk7XG59XG5leHBvcnRzLnN0cmluZ2lmeSA9IHN0cmluZ2lmeTtcbi8qKlxuICogUGFyc2VzIGEgSlNPTiBzdHJpbmcgaW50byBhIFtbVGhlbWVdXSB3aXRoIGZvcm1hdHRlciBmdW5jdGlvbnMuXG4gKlxuICogYGBgdHNcbiAqIGltcG9ydCAqIGFzIGZzIGZyb20gJ2ZzJztcbiAqIGltcG9ydCB7cGFyc2UsIGhpZ2hsaWdodH0gZnJvbSAnY2xpLWhpZ2hsaWdodCc7XG4gKlxuICogZnMucmVhZEZpbGUoJ215dGhlbWUuanNvbicsICd1dGY4JywgKGVycjogYW55LCBqc29uOiBzdHJpbmcpICA9PiB7XG4gKiAgICAgaWYgKGVycikgdGhyb3cgZXJyO1xuICogICAgIGNvbnN0IGNvZGUgPSBoaWdobGlnaHQoJ1NFTEVDVCAqIEZST00gdGFibGUnLCB7dGhlbWU6IHBhcnNlKGpzb24pfSk7XG4gKiAgICAgY29uc29sZS5sb2coY29kZSk7XG4gKiB9KTtcbiAqIGBgYFxuICovXG5mdW5jdGlvbiBwYXJzZShqc29uKSB7XG4gICAgcmV0dXJuIGZyb21Kc29uKEpTT04ucGFyc2UoanNvbikpO1xufVxuZXhwb3J0cy5wYXJzZSA9IHBhcnNlO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9dGhlbWUuanMubWFwIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/cli-highlight/dist/theme.js\n");

/***/ })

};
;